name: Build with Emscripten

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write
  pages: write
  id-token: write

jobs:

  build:
    runs-on: ubuntu-latest
    container:
      image: emscripten/emsdk:latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y ninja-build

    - name: Verify installations
      run: |
        cmake --version
        echo "Ninja $(ninja --version)"
        emcc --version

    - name: Configure CMake
      run: |
        cmake --preset emsdk

    - name: Build project
      run: |
        cmake --build build --config Release -j$(nproc)

    - name: Run tests
      run: |
        node test/runner.js build/test/Release/tests.js -r junit > tests.xml
        node test/runner.js build/test/Release/benchmarks.js -r junit > benchmarks.xml

    - name: Publish test results
      uses: mikepenz/action-junit-report@v5
      if: ${{ !cancelled() }}
      with:
        report_paths: tests.xml
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload test results
      if: ${{ !cancelled() }}
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: '*.xml'
        retention-days: 7

  build-coverage:
    runs-on: ubuntu-latest
    container:
      image: emscripten/emsdk:latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4


    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y ninja-build lcov gpg

    - name: Verify installations
      run: |
        cmake --version
        echo "Ninja $(ninja --version)"
        emcc --version
        lcov --version

    - name: Configure CMake with coverage
      run: |
        cmake --preset coverage

    - name: Build project with coverage
      run: |
        cmake --build build/coverage -j$(nproc)

    - name: Run tests with coverage
      run: |
        node test/runner.js build/coverage/test/tests.js

    - name: Generate coverage data
      if: ${{ !cancelled() }}
      run: |
        lcov -b . -d build/coverage/src/CMakeFiles/wasm-dom.dir/wasm-dom/ -c -o lcov.info --gcov-tool `pwd`/coverage/llvm-gcov --no-external

    - name: Report code coverage
      id: coverage-report
      if: ${{ !cancelled() }}
      uses: zgosalvez/github-actions-report-lcov@v4
      with:
        coverage-files: lcov.info
        minimum-coverage: 100
        artifact-name: code-coverage-report
        github-token: ${{ secrets.GITHUB_TOKEN }}
        update-comment: true

    - name: Generate coverage badge
      if: ${{ !cancelled() && github.ref == 'refs/heads/main' }}
      run: |
        mkdir badges
        echo "{ \"coverage\": \"${{ steps.coverage-report.outputs.total-coverage }}\" }" > badges/coverage-badge.json

    - name: Setup Pages
      if: ${{ !cancelled() && github.ref == 'refs/heads/main' }}
      uses: actions/configure-pages@v5

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      if: ${{ !cancelled() && github.ref == 'refs/heads/main' }}
      with:
        path: badges/

    - name: Deploy to GitHub Pages
      id: deployment
      if: ${{ !cancelled() && github.ref == 'refs/heads/main' }}
      uses: actions/deploy-pages@v4
